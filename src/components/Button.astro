---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'white' | 'accent';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
  disabled?: boolean;
  [key: string]: any;
}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  class: className = '', 
  disabled = false,
  ...props 
} = Astro.props;

// Use the classes from our global CSS
const baseClasses = 'btn';

const variants = {
  primary: 'btn-primary',
  secondary: 'btn-outline', 
  outline: 'btn-outline',
  white: 'btn-white',
  accent: 'btn-accent'
};

const sizes = {
  sm: 'btn-sm',
  md: '', // default size
  lg: 'btn-lg'
};

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`.trim();

const Tag = href ? 'a' : 'button';
---

<Tag 
  href={href} 
  class={classes}
  disabled={disabled}
  {...props}
>
  <slot />
</Tag>

<style>
  /* Additional button sizes not in global CSS */
  .btn-lg {
    padding: 1rem 2.5rem;
    font-size: 1.125rem;
    font-weight: var(--font-weight-bold);
  }
  
  .btn-sm {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: var(--font-weight-semibold);
  }
  
  /* Disabled state */
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
  }
  
  .btn:disabled:hover {
    transform: none !important;
    box-shadow: var(--shadow-md) !important;
  }
  
  /* Focus states for accessibility */
  .btn:focus {
    outline: none;
    box-shadow: var(--shadow-lg), 0 0 0 3px rgba(251, 44, 54, 0.2) !important;
  }
  
  .btn-white:focus {
    box-shadow: var(--shadow-lg), 0 0 0 3px rgba(33, 33, 33, 0.2) !important;
  }
  
  /* Loading state (can be added via JavaScript) */
  .btn.loading {
    position: relative;
    color: transparent !important;
  }
  
  .btn.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
    border: 2px solid currentColor;
    border-top-color: transparent;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    color: inherit;
  }
  
  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
  
  /* Icon support */
  .btn :global(.icon) {
    width: 1em;
    height: 1em;
  }
  
  .btn :global(.icon + *) {
    margin-left: 0.5rem;
  }
  
  .btn :global(* + .icon) {
    margin-left: 0.5rem;
  }
</style>